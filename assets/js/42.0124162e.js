(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{641:function(t,v,_){"use strict";_.r(v);var r=_(11),s=Object(r.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"http-特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-特点"}},[t._v("#")]),t._v(" HTTP 特点")]),t._v(" "),_("ol",[_("li",[_("strong",[t._v("灵活可扩展")]),t._v(":\n"),_("ol",[_("li",[t._v("语义上自由: 只规定了基本格式，比如空格分隔单词，换行分隔字段，其他的各个部分都没有严格的语法限制。")]),t._v(" "),_("li",[t._v("传输形式的多样性: 不仅仅可以传输文本，还能传输图片、视频等任意数据，非常方便。")])])]),t._v(" "),_("li",[_("strong",[t._v("可靠传输")]),t._v(": HTTP 基于 TCP/IP，因此把这一特性继承了下来")]),t._v(" "),_("li",[_("strong",[t._v("请求-应答")]),t._v(": 也就是"),_("code",[t._v("一发一收")]),t._v("、"),_("code",[t._v("有来有回")]),t._v("，当然这个请求方和应答方不单单指客户端和服务器之间，如果某台服务器作为代理来连接后端的服务端，那么这台服务器也会扮演请求方的角色。")]),t._v(" "),_("li",[_("strong",[t._v("无状态")]),t._v(": 这里的状态是指"),_("strong",[t._v("通信过程的上下文信息")]),t._v("，而每次 http 请求都是独立、无关的，默认不需要保留状态信息。")])]),t._v(" "),_("h2",{attrs:{id:"http-缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-缺点"}},[t._v("#")]),t._v(" HTTP 缺点")]),t._v(" "),_("h3",{attrs:{id:"无状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#无状态"}},[t._v("#")]),t._v(" 无状态")]),t._v(" "),_("p",[t._v("优点和缺点还是要分场景来看的，对于 HTTP 而言，最具争议的地方在于它的无状态。")]),t._v(" "),_("p",[t._v("在需要长连接的场景中，需要保存大量的上下文信息，以免传输大量重复的信息，那么这时候无状态就是 http 的缺点了。")]),t._v(" "),_("p",[t._v("但与此同时，另外一些应用仅仅只是为了获取一些数据，不需要保存连接上下文信息，无状态反而减少了网络开销，成为了 http 的优点。")]),t._v(" "),_("h3",{attrs:{id:"明文传输"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#明文传输"}},[t._v("#")]),t._v(" 明文传输")]),t._v(" "),_("p",[t._v("即协议里的报文(主要指的是头部)不使用二进制数据，而是文本形式。")]),t._v(" "),_("p",[t._v("这当然对于调试提供了便利，但同时也让 HTTP 的报文信息暴露给了外界，给攻击者也提供了便利。")]),t._v(" "),_("p",[_("code",[t._v("WIFI陷阱")]),t._v("就是利用 HTTP 明文传输的缺点，诱导你连上热点，然后疯狂抓你所有的流量，从而拿到你的敏感信息。")]),t._v(" "),_("h3",{attrs:{id:"队头阻塞问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#队头阻塞问题"}},[t._v("#")]),t._v(" 队头阻塞问题")]),t._v(" "),_("p",[t._v("当 http 开启长连接时，共用一个 TCP 连接，同一时刻只能处理一个请求，那么当前请求耗时过长的情况下，其它的请求只能处于阻塞状态，也就是著名的"),_("strong",[t._v("队头阻塞")]),t._v("问题。")]),t._v(" "),_("p",[t._v("解决方案如下面两种:")]),t._v(" "),_("p",[_("strong",[t._v("并发连接")])]),t._v(" "),_("p",[t._v("对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。在 RFC2616 规定过客户端最多并发 2 个连接，不过事实上在现在的浏览器标准中，这个上限要多很多，Chrome 中是 6 个。")]),t._v(" "),_("p",[t._v("但其实，即使是提高了并发连接，还是不能满足人们对性能的需求。")]),t._v(" "),_("p",[_("strong",[t._v("域名分片")])]),t._v(" "),_("p",[t._v("一个域名不是可以并发 6 个长连接吗？那我就多分几个域名。")]),t._v(" "),_("p",[t._v("比如 content1.ytxcloud.com 、content2.ytxcloud.com。")]),t._v(" "),_("p",[t._v("这样一个 ytxcloud.com 域名下可以分出非常多的二级域名，而它们都指向同样的一台服务器，能够并发的长连接数更多了，事实上也更好地解决了队头阻塞的问题。")]),t._v(" "),_("p",[_("strong",[t._v("思考")])]),t._v(" "),_("p",[t._v("这并没有真正从 HTTP 本身的层面解决问题，只是增加了 TCP 连接，分摊风险而已。而且这么做也有弊端，多条 TCP 连接会竞争有限的带宽，让真正优先级高的请求不能优先处理。")])])}),[],!1,null,null,null);v.default=s.exports}}]);