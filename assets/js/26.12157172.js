(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{594:function(_,v,t){_.exports=t.p+"assets/img/hpack_hash_table.769dcf95.png"},644:function(_,v,t){"use strict";t.r(v);var s=t(11),a=Object(s.a)({},(function(){var _=this,v=_.$createElement,s=_._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[s("p",[_._v("由于 HTTPS 在安全方面已经做的非常好了，HTTP 改进的关注点放在了性能方面。对于 HTTP/2 而言，它对于性能的提升主要在于两点:")]),_._v(" "),s("ul",[s("li",[_._v("头部压缩")]),_._v(" "),s("li",[_._v("多路复用")])]),_._v(" "),s("p",[_._v("当然还有一些颠覆性的功能实现:")]),_._v(" "),s("ul",[s("li",[_._v("设置请求优先级")]),_._v(" "),s("li",[_._v("服务器推送")])]),_._v(" "),s("p",[_._v("这些重大的提升本质上也是为了解决 HTTP 本身的问题而产生的。接下来我们来看看 HTTP/2 解决了哪些问题，以及解决方式具体是如何的。")]),_._v(" "),s("h2",{attrs:{id:"头部压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#头部压缩"}},[_._v("#")]),_._v(" 头部压缩")]),_._v(" "),s("p",[_._v("在 HTTP/1.1 及之前的时代，"),s("strong",[_._v("请求体")]),_._v("一般会有响应的压缩编码过程，通过 "),s("code",[_._v("Content-Encoding")]),_._v(" 头部字段来指定，但你有没有想过头部字段本身的压缩呢？当请求字段非常复杂的时候，尤其对于 GET 请求，请求报文几乎全是请求头，这个时候还是存在非常大的优化空间的。HTTP/2 针对头部字段，也采用了对应的压缩算法——HPACK，对请求头进行压缩。")]),_._v(" "),s("p",[_._v("HPACK 算法是专门为 HTTP/2 服务的，它主要的亮点有两个：")]),_._v(" "),s("ol",[s("li",[_._v("首先是在服务器和客户端之间建立哈希表，将用到的字段存放在这张表中，那么在传输的时候对于之前出现过的值，只需要把"),s("strong",[_._v("索引")]),_._v("(比如 0，1，2，...)传给对方即可，对方拿到索引查表就行了。这种"),s("strong",[_._v("传索引")]),_._v("的方式，可以说让请求头字段得到极大程度的精简和复用。")])]),_._v(" "),s("p",[s("img",{attrs:{src:t(594),alt:"hpack索引表"}})]),_._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[_._v("小贴士")]),_._v(" "),s("p",[_._v('HTTP/2 当中废除了起始行的概念，将起始行中的请求方法、URI、状态码转换成了头字段，不过这些字段都有一个":"前缀，用来和其它请求头区分开。')])]),s("ol",{attrs:{start:"2"}},[s("li",[_._v("其次是对于整数和字符串进行"),s("strong",[_._v("哈夫曼编码")]),_._v("，哈夫曼编码的原理就是先将所有出现的字符建立一张索引表，然后让出现次数多的字符对应的索引尽可能短，传输的时候也是传输这样的索引序列，可以达到非常高的压缩率。")])]),_._v(" "),s("h2",{attrs:{id:"多路复用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多路复用"}},[_._v("#")]),_._v(" 多路复用")]),_._v(" "),s("p",[_._v("HTTP/2 从 HTTP 协议本身解决了队头阻塞问题。注意，这里并不是指的 "),s("code",[_._v("TCP队头阻塞")]),_._v("，而是 "),s("code",[_._v("HTTP队头阻塞")]),_._v("，两者并不是一回事。TCP 的队头阻塞是在"),s("code",[_._v("数据包")]),_._v("层面，单位是"),s("code",[_._v("数据包")]),_._v("，前一个报文没有收到便不会将后面收到的报文上传给 HTTP，而 HTTP 的队头阻塞是在 "),s("code",[_._v("HTTP请求-响应")]),_._v("层面，前一个请求没处理完，后面的请求就要阻塞住。两者所在的层次不一样。")]),_._v(" "),s("p",[s("strong",[_._v("二进制分帧")])]),_._v(" "),s("p",[_._v("首先，HTTP/2 认为明文传输对机器而言太麻烦了，不方便计算机的解析，因为对于文本而言会有多义性的字符，比如回车换行到底是内容还是分隔符，在内部需要用到状态机去识别，效率比较低。于是 HTTP/2 干脆把报文全部换成二进制格式，全部传输"),s("code",[_._v("01")]),_._v("串，方便了机器的解析。")]),_._v(" "),s("p",[_._v("原来"),s("code",[_._v("Headers + Body")]),_._v("的报文格式如今被拆分成了一个个二进制的帧，用"),s("code",[_._v("Headers帧")]),_._v("存放头部字段，"),s("code",[_._v("Data帧")]),_._v("存放请求体数据。分帧之后，服务器看到的不再是一个个完整的 HTTP 请求报文，而是一堆乱序的二进制帧。这些二进制帧不存在先后关系，因此也就不会排队等待，也就没有了 HTTP 的队头阻塞问题。")]),_._v(" "),s("p",[_._v("通信双方都可以给对方发送二进制帧，这种二进制帧的"),s("strong",[_._v("双向传输的序列")]),_._v("，也叫做"),s("code",[_._v("流(Stream)")]),_._v("。HTTP/2 用流来在一个 TCP 连接上来进行多个数据帧的通信，这就是"),s("strong",[_._v("多路复用")]),_._v("的概念。")]),_._v(" "),s("p",[_._v("可能你会有一个疑问，既然是乱序首发，那最后如何来处理这些乱序的数据帧呢？")]),_._v(" "),s("p",[_._v("首先要声明的是，所谓的乱序，指的是不同 ID 的 Stream 是乱序的，但同一个 Stream ID 的帧一定是按顺序传输的。二进制帧到达后对方会将 Stream ID 相同的二进制帧组装成完整的"),s("strong",[_._v("请求报文")]),_._v("和"),s("strong",[_._v("响应报文")]),_._v("。当然，在二进制帧当中还有其他的一些字段，实现了优先级和流量控制等功能。")]),_._v(" "),s("h3",{attrs:{id:"帧结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#帧结构"}},[_._v("#")]),_._v(" 帧结构")]),_._v(" "),s("h2",{attrs:{id:"服务器推送"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器推送"}},[_._v("#")]),_._v(" 服务器推送")]),_._v(" "),s("p",[_._v("在 HTTP/2 当中，服务器已经不再是完全被动地接收请求，响应请求，它也能新建 stream 来给客户端发送消息，当 TCP 连接建立之后，比如浏览器请求一个 HTML 文件，服务器就可以在返回 HTML 的基础上，将 HTML 中引用到的其他资源文件一起返回给客户端，减少客户端的等待。")])])}),[],!1,null,null,null);v.default=a.exports}}]);